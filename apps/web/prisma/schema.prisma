generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  schemas  = ["mindline"]
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  passwordHash  String
  accounts      Account[]
  boards        Board[]
  events        CalendarEvent[]
  notes         Note[]
  sessions      Session[]
  tasks         Task[]

  @@index([email])
  @@map("users")
  @@schema("mindline")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@schema("mindline")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@schema("mindline")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
  @@schema("mindline")
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String?
  priority        Priority       @default(MEDIUM)
  dueDate         DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String         @map("user_id")
  calendarEventId String?        @map("calendar_event_id")
  label           String?
  order           Float          @default(0)
  status          TaskStatus     @default(ACTIVE)
  calendarEvent   CalendarEvent? @relation(fields: [calendarEventId], references: [id])
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, dueDate])
  @@map("tasks")
  @@schema("mindline")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startsAt    DateTime @map("starts_at")
  endsAt      DateTime @map("ends_at")
  allDay      Boolean  @default(false)
  color       String?  @default("#3b82f6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @map("user_id")
  location    String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("calendar_events")
  @@schema("mindline")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Note {
  id        String         @id @default(cuid())
  title     String
  content   Json
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String         @map("user_id")
  tags      Json           @default("[]")
  revisions NoteRevision[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
  @@schema("mindline")
}

model NoteRevision {
  id        String   @id @default(cuid())
  noteId    String   @map("note_id")
  content   Json
  createdAt DateTime @default(now())
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("note_revisions")
  @@schema("mindline")
}

model Board {
  id          String      @id @default(cuid())
  name        String
  description String?
  deadline    DateTime?
  theme       String?     @default("#3b82f6")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @map("user_id")
  edges       BoardEdge[]
  items       BoardItem[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("boards")
  @@schema("mindline")
}

model BoardItem {
  id           String       @id @default(cuid())
  externalId   String       @map("external_id")
  externalType ExternalType @map("external_type")
  xPos         Float        @map("x_pos")
  yPos         Float        @map("y_pos")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  boardId      String       @map("board_id")
  sourceEdges  BoardEdge[]  @relation("SourceItem")
  targetEdges  BoardEdge[]  @relation("TargetItem")
  board        Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([boardId, externalId, externalType])
  @@map("board_items")
  @@schema("mindline")
}

model BoardEdge {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  boardId   String    @map("board_id")
  sourceId  String    @map("source_id")
  targetId  String    @map("target_id")
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  source    BoardItem @relation("SourceItem", fields: [sourceId], references: [id], onDelete: Cascade)
  target    BoardItem @relation("TargetItem", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId])
  @@map("board_edges")
  @@schema("mindline")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@schema("mindline")
}

enum TaskStatus {
  ACTIVE
  COMPLETED
  ARCHIVED

  @@schema("mindline")
}

enum ExternalType {
  TASK
  EVENT

  @@schema("mindline")
}
