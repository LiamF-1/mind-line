// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// User model for authentication and user management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String    // Hashed password for credentials provider
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  events        CalendarEvent[]
  notes         Note[]
  boards        Board[]

  @@index([email])
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application models
model Task {
  id               String    @id @default(cuid())
  title            String
  description      String?
  dueDate          DateTime?
  priority         Priority  @default(MEDIUM)
  status           TaskStatus @default(ACTIVE)
  label            String?   // Color label
  order            Float     @default(0) // For reordering
  calendarEventId  String?   @map("calendar_event_id")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarEvent CalendarEvent? @relation(fields: [calendarEventId], references: [id], onDelete: SetNull)

  @@index([userId, status])
  @@index([userId, dueDate])
  @@map("tasks")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startsAt    DateTime @map("starts_at")
  endsAt      DateTime @map("ends_at")
  allDay      Boolean  @default(false)
  color       String?  @default("#3b82f6")
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@map("calendar_events")
}

model Note {
  id        String   @id @default(cuid())
  title     String?
  content   Json     // Rich text content
  tags      String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

// Workflow Boards models
model Board {
  id          String   @id @default(cuid())
  name        String
  description String?
  deadline    DateTime?
  theme       String?  @default("#3b82f6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  BoardItem[]
  edges  BoardEdge[]

  @@map("boards")
}

model BoardItem {
  id           String         @id @default(cuid())
  externalId   String         @map("external_id") // ID of the task or event
  externalType ExternalType   @map("external_type") // 'task' or 'event'
  xPos         Float          @map("x_pos") // X position on canvas
  yPos         Float          @map("y_pos") // Y position on canvas
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  // Edges where this item is the source or target
  sourceEdges BoardEdge[] @relation("SourceItem")
  targetEdges BoardEdge[] @relation("TargetItem")

  @@unique([boardId, externalId, externalType])
  @@map("board_items")
}

model BoardEdge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  boardId  String @map("board_id")
  board    Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  sourceId String    @map("source_id")
  source   BoardItem @relation("SourceItem", fields: [sourceId], references: [id], onDelete: Cascade)
  
  targetId String    @map("target_id")
  target   BoardItem @relation("TargetItem", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId])
  @@map("board_edges")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ExternalType {
  TASK
  EVENT
}